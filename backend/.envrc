#!/usrbin/env bash
# use asdf with direnv
# https://github.com/asdf-community/asdf-direnv
# you must direnv allow this file for it to work
# Added by install-asdf.sh on Thu Sep 30 23:25:03 CEST 2021
use asdf

# run all the .envrc parents
source_up_if_exists
# also source .env if it exists
dotenv_if_exists

# # https://unix.stackexchange.com/questions/575481/how-can-i-find-the-ancestor-directory-with-a-given-name
# look upwards to the directory before ./git
# use this if at root
# export WS_DIR="$HOME/ws"
# use this if in ws/git/src
pwd="$(PWD)" && export WS_DIR="${pwd%git"${pwd#*git}"}"

# python uv uses venv so if it exists and it is not activated, use it
# python uv uses venv so exit the previous one and enter the current
# if command -v deactivate &>/dev/null; then deactivate; fi
# shellcheck disable=SC1091
# if [[ -x .venv/bin/activate ]]; then source .venv/bin/activate; fi
# from https://github.com/direnv/direnv/blob/master/man/direnv-stdlib.1.md
layout go
layout node
# layout python  ## gives you .direnv virtualenv
# layout pipenv  ## deprecated gives you pipenv
# layout anaconda  ## gives you anada activation (need direnvrc add)
# layout poetry  ## poetry venv used
# layout uv  ## uv used
# note that layout python does not specify the minor version so does not work
# with the code below for UV_PROJECT_ENVIRONMENT
# layout python
# Only create a python venv is python is locally installed with
# asdf direnv local python _version_
if [[ -r .tool-versions ]] && grep "^python" .tool-versions; then
	layout uv
	export UV_PROJECT_ENVIRONMENT="$VIRTUAL_ENV"
fi
# 	grep "^python" .tool-versions | cut -f 2 -d ' ' >.python_version
# UV_PROJECT_ENVIRONMENT="$PWD/.direnv/python-$(cat .python_version)"
# 	export UV_PROJECT_ENVIRONMENT
# fi

# https://vxlabs.com/2024/10/10/use-direnv-for-uv-with-out-of-source-virtual-environments/
# tell uv where the direnv project lives and it is not .venv
# https://varrette.gforge.uni.lu/blog/2019/09/10/using-pyenv-virtualenv-direnv/
# note that .python_version must exist and should same as the line in .tool-versions
# althought
# https://docs.astral.sh/uv/pip/environments/#discovery-of-python-environments
# says that it should detect VIRTUAL_ENV is set you still need to
# set UV_PROJECT_ENVIRONMENT
# if [[ -v VIRTUAL_ENV ]]; then
# 	export UV_PROJECT_ENVIRONMENT="$VIRTUAL_ENV"
# elif [[ -r .tool-versions ]] && grep "^python" .tool-versions; then
# 	layout python
# 	grep "^python" .tool-versions | cut -f 2 -d ' ' >.python_version
# UV_PROJECT_ENVIRONMENT="$PWD/.direnv/python-$(cat .python_version)"
# 	export UV_PROJECT_ENVIRONMENT
# fi

# Added by install-1password.sh on Mon Sep  2 14:45:33 PDT 2024
#[[ -v AWS_ACCESS_KEY_ID ]] || export "AWS_ACCESS_KEY_ID"="$(op item get "AWS Access Key" --fields "access key id" --reveal)"
# [[ -v AWS_SECRET_ACCESS_KEY ]] || export "AWS_SECRET_ACCESS_KEY"="$(op item get "AWS Access Key" --fields "secret access key" --reveal)"
# [[ -v DIGITALOCEAN_ACCESS_TOKEN ]] || export "DIGITALOCEAN_ACCESS_TOKEN"="$(op item get "DigitalOcean Personal Access Token" --fields "token" --reveal)"
# [[ -v GITHUB_TOKEN ]] || export "GITHUB_TOKEN"="$(op item get "GitHub Personal Access Token Dev" --fields "personal access token" --reveal)"
# # needed for ghcr.io docker pulls
#[[ -v GITHUB_TOKEN_CLASSIC ]] || export "GITHUB_TOKEN_CLASSIC"="$(op item get "GitHub Personal Access Token Classic" --fields "personal access token" --reveal)"
# [[ -v LOCALSTACK_API_KEY ]] || export "LOCALSTACK_API_KEY"="$(op item get "LocalStack API Key" --fields "api key" --reveal)"
#[[ -v ANTHROPIC_API_KEY ]] || export "ANTHROPIC_API_KEY"="$(op item get "Anthropic API Key Dev" --fields "api key" --reveal)"
#[[ -v GEMINI_API_KEY ]] || export "GEMINI_API_KEY"="$(op item get "Google Gemini API Key Dev" --fields "api key" --reveal)"
#[[ -v GROQ_API_KEY ]] || export "GROQ_API_KEY"="$(op item get "Groq API Key Dev" --fields "api key" --reveal)"
#[[ -v HF_TOKEN ]] || export "HF_TOKEN"="$(op item get "Hugging Face API Token Dev" --fields "user access token" --reveal)"
#[[ -v OPENAI_API_KEY ]] || export "OPENAI_API_KEY"="$(op item get "OpenAI API Key Dev" --fields "api key" --reveal)"
#[[ -v OPENROUTER_API_KEY ]] || export "OPENROUTER_API_KEY"="$(op item get "OpenRouter Key Dev" --fields "key" --reveal)"
#[[ -v REPLICATE_API_KEY ]] || export "REPLICATE_API_KEY"="$(op item get "Replicate API Token Dev" --fields "api token" --reveal)"
#[[ -v SLASH_GPT_ENV_WEBPILOT_UID ]] || export "SLASH_GPT_ENV_WEBPILOT_UID"="$(op item get "Webpilot UID Dev" --fields "key" --reveal)"
# [[ -v SUPERSET_SECRET_KEY ]] || export "SUPERSET_SECRET_KEY"="$(op item get "Apache Superset Secret Key Dev" --fields "api key" --reveal)"
# needed for open webui or else it will write a file.
# [[ -v WEBUI_SECRET_KEY ]] || export "WEBUI_SECRET_KEY"="$(op item get "Open WebUI Secret Key Dev" --fields "secret key" --reveal)"
#[[ -v DEEPSEEK_API_KEY ]] || export "DEEPSEEK_API_KEY"="$(op item get "deepseek API Key Dev" --fields "api key" --reveal)"

# Added by install-ollama.sh on Thu Jan  2 11:24:08 PST 2025
export OLLAMA_KV_CACHE_TYPE=q4_0
export OLLAMA_FLASH_ATTENTION=1
